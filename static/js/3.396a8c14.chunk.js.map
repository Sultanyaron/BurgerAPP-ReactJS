{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["module","exports","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","street","zipCode","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","Button","btnType","disabled","loading","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.396a8c14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3KHu4\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport classes from './ContactData.module.css';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n                \r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false\r\n                ,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'cheapest',\r\n                validation: {},\r\n                valid: true //we set it to true even tho we dont have validation, ment to inform the overall form that this property is valid alrdy \r\n            }\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        };\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    };\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n        [inputIdentifier]: updatedFormElement\r\n    });\r\n        \r\n        let formIsValid = true;\r\n        for ( let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        };\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    };\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        };\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig} \r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        };\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    \r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>A delicious hamburger!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport ContactData from './ContactData/ContactData';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    };\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    };\r\n\r\n\r\n    render () {\r\n        let summary = <Redirect to=\"/\" />\r\n        \r\n        if ( this.props.ings ) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}/>\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        };\r\n        \r\n        return summary;\r\n    };\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);","\r\nimport React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    \r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    };\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = < textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            < select \r\n                className={inputClasses.join(' ')} \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                \r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                />\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Sx81\",\"Label\":\"Input_Label__2kLXZ\",\"InputElement\":\"Input_InputElement__1UOxK\",\"Invalid\":\"Input_Invalid__1p0oS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__vojAW\"};"],"sourceRoot":""}